#!/usr/bin/env groovy

def callJenkinsJob(String jobName, String jobId) {
    def responseCrumb = httpRequest acceptType: 'APPLICATION_JSON',
                                    httpMode: 'GET',
                                    consoleLogResponseBody: true,
                                    authentication: 'jenkins-api',
                                    contentType: 'APPLICATION_JSON',
                                    ignoreSslErrors: true,
                                    responseHandle: 'LEAVE_OPEN',
                                    url: "http://jenkins:8080/crumbIssuer/api/json"
    def jsonObj = readJSON text: responseCrumb.content
    httpRequest acceptType: 'APPLICATION_JSON',
                httpMode: 'GET',
                consoleLogResponseBody: true,
                authentication: 'jenkins-api',
                contentType: 'APPLICATION_JSON',
                ignoreSslErrors: true,
                customHeaders: [[name: "Jenkins-Crumb","value": jsonObj["crumb"]]],
                responseHandle: 'LEAVE_OPEN',
                url: "http://localhost:8080/job/Jenkins_Job_Metrics_Publisher/buildWithParameters?token=TestToken&JOB_NAME=${jobName}&JOB_ID=${jobId}"

            
}
def getCustomData() {
    def mycustomfield = [:]
    mycustomfield['env'] = params.ENV
   // mycustomfield['build-result'] = ${currentBuild.currentResult}
    
    println(currentBuild)
    def mycustomMeasure = [:]
    mycustomMeasure['build-stats'] = mycustomfield
    
    
    
    def testenv = "env=${params.ENV}\nnew_tag=hello"
     
    return testenv
}



pipeline {
    agent any
    environment {
        DOCKER_PASSWORD = credentials('docker_reg_pass') 
        APP_VERSION = "${DEPLOY_APP_VERSION}"
    }
    stages {
        
        stage('Check Parameters') {
            steps {
                script {
                    if (params.DEPLOY_APP_VERSION == null) {
                        println("ERROR : Please select a APP_VERSION");
                        currentBuild.result = 'FAILURE' 
                        return
                    } 

                     
                    if (params.DEPLOY_APP == null) {
                        println("ERROR : Please select a application to deploy");
                        currentBuild.result = 'FAILURE' 
                        return
                    }

                    if (params.Environment == null) {
                        println("ERROR : Please select a environment");
                        currentBuild.result = 'FAILURE' 
                        return
                    }

                    if (params.Region == null) {
                        println("ERROR : Please select a Region");
                        currentBuild.result = 'FAILURE' 
                        return
                    }
                }

            }
        }
        stage('Deploy') {
            steps {
                sh '''
                    cd application_deploy
                    if [ $DEPLOY_APP = "product_app" ]
                    then
                        echo "Deploying product_app ................ "
                        ./jenkins/deploy/deploy.sh ${Environment} ${Region} ${DEPLOY_APP}
                    fi
                    if [ $DEPLOY_APP = "customer_app" ]
                    then
                        echo "Deploying customer_app ................ "
                        ./jenkins/deploy/deploy.sh ${Environment} ${Region} ${DEPLOY_APP}
                    fi
                    
                '''
            }
        }
       
  
    }
    post {
        always {
            script {
                callJenkinsJob("Deploy_Applications_Job",BUILD_NUMBER);
            }
        }
    }
}
