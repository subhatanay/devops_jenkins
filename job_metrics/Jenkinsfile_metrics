#!/usr/bin/env groovy

// Start Build Analyze functions
def fetchStaticJobConfiguration() { 
    def jobConfigObject = readJSON file:'./job_metrics/job_config.json'
    return jobConfigObject
}

def constructJobDetailsAPIUrl(String url ,String jobId) { 
    def jenkins_url = "${url}/${jobId}/api/json"  
    return jenkins_url;
}
def getRequest(String url) {
    def response = httpRequest acceptType: 'APPLICATION_JSON',
                                httpMode: 'GET',
                                consoleLogResponseBody: false,
                                authentication: 'jenkins-api',
                                contentType: 'APPLICATION_JSON',
                                ignoreSslErrors: true,
                                responseHandle: 'LEAVE_OPEN',
                                url: url
   
    if (response.status == 200) {
         return convertJsonStringToJsonObject(response.content) 
    } else {
         return convertJsonStringToJsonObject('{ "errorCode": "500"}')  
    }
   
}
def collectMetricsFromJobdetails(job_name,jsonBuildDetails,jobConfig) { 
    def details = [:]
    details["job_name"] = job_name
    details["build_number"] = jsonBuildDetails["id"]
    details["build_result"] = jsonBuildDetails["result"]
    details["build_agent"] =  "default" 
    details["build_time"] = jsonBuildDetails["duration"]
    details["build_measured_time"] = jsonBuildDetails["estimatedDuration"]
    details["build_started_by"] = jsonBuildDetails["actions"][1]["causes"][0]["userId"]
    details["timestamp"] = jsonBuildDetails["timestamp"]
    
    def jobBuildParams = jsonBuildDetails["actions"][0]["parameters"]
    
    
    
    details["build_type"] = jobConfig["build_type"]
    
    if (jobConfig["build_type"] == "BUILD") {
        
        if (jobBuildParams[0]["name"] == "APPLICATION_VERSION") {
            details["build_version"] = jobBuildParams[0]["value"]
        }
        // details["environment"] =""
        // details["dc"] =""
        details["component"] = jobConfig["component_name"]
        
    } else if (jobConfig["build_type"] == "DEPLOY") {
        if (jobBuildParams[0]["name"] == "DEPLOY_APP_VERSION") {
            details["build_version"] = jobBuildParams[0]["value"]
        }
        if (jobBuildParams[1]["name"] == "DEPLOY_APP") {
            details["component"] =jobBuildParams[1]["value"]
        }
        if (jobBuildParams[2]["name"] == "Environment") {
            details["environment"] = jobBuildParams[2]["value"]
        }
        if (jobBuildParams[3]["name"] == "Region") {
            details["dc"] = jobBuildParams[3]["value"]
        } 
    }
    
    return details    
}
def convertJsonStringToJsonObject(jsonString) { 
    jsonData = readJSON text:jsonString 
    return jsonData
}

def convertMapToJsonString(jsonObject) { 
    jsonString = writeJSON returnText: true , json: jsonObject
    return jsonString
} 

// End Build Analyze functions

// Influx 

def convertBuildDetailsToInfluxMeasurements(buildMetrics) {
    def measurementFields = [:]
    def measurementTags = [:] 
    def tags = [:]
    def fields = [:] 
    //tags["time"] = String.valueOf(buildMetrics["timestamp"])
    tags["job_name"] = buildMetrics["job_name"]
    tags["build_type"] = buildMetrics["build_type"]
    tags["environment"] = buildMetrics["environment"]
    
    if ( buildMetrics["component"] !=null) {
        tags["component"] = buildMetrics["component"]
    }
    if (buildMetrics["dc"] !=null) {
        tags["dc"] = buildMetrics["dc"]
    }
    tags["build_agent_name"] = buildMetrics["build_agent"]
    tags["build_result"] = buildMetrics["build_result"]
    tags["build_version"] = buildMetrics["build_version"]
    tags["build_started_by"] = buildMetrics["build_started_by"]
    tags["build_causer"] = buildMetrics["build_started_by"]
    tags["project_name"] = buildMetrics["job_name"]
    tags["project_path"] = buildMetrics["job_name"]
    
    if ( buildMetrics["component"] !=null) {
        tags["component_f"] = buildMetrics["component"]
    }
    fields["build_number"] = Integer.valueOf(buildMetrics["build_number"])
    fields["build_time"] = buildMetrics["build_time"]
    fields["build_measured_time"] = buildMetrics["build_measured_time"] 
    fields["build_exec_time"] = buildMetrics["build_time"] 
    
    
    
    measurementFields["build_stats"] = fields
    measurementTags["build_stats"] = tags
    
    return [fields , tags]
}

def transformMapToInfluxQuery(measurementName,time,tags,fields) {
    StringBuilder query = new StringBuilder(measurementName + ",");
    
    tags.each { key,val ->  query.append(key).append("=").append(val).append(",") }
    
    query.deleteCharAt(query.size()-1);
    query.append(" ");
    
    fields.each { key,val ->   query.append(key).append("=").append(val).append(",") }
    
    query.deleteCharAt(query.size()-1);
   // query.append(" ").append(time);
    return query.toString();
}

def writeToInfluxDB(influcUrl, db ,auth, query) {
    influcUrl = influcUrl + "/write?db=" + db;
    println("Calling InfluxDB ${influcUrl} to push metrics ")
    def response = httpRequest acceptType: 'APPLICATION_JSON',
                                httpMode: 'POST',
                                consoleLogResponseBody: false,
                                requestBody: query,
                                authentication: auth, 
                                ignoreSslErrors: true,
                                responseHandle: 'LEAVE_OPEN',
                                url: influcUrl
    if (response.status >=200 && response.status <=399) {
        println("Successfully pushed metrics to influx db")
    } else {
        println("Got error from influx db  :: reason :: " + response.content)
    }
}
 

pipeline {
    agent any

    stages {
        stage('Wait few seconds till Triggered job finished') {
            steps {
                sh """
                    sleep 10
                """
            }
        }
        stage('Analyze Build Metrics') {
            steps {
                script { 
                    println("Analyzing Jenkins Build for Job Name  :: " + params.JOB_NAME + " and Job ID :: " + params.JOB_ID)
                    def jobConfig = fetchStaticJobConfiguration()
                    def jenkinsUrl = constructJobDetailsAPIUrl(jobConfig["jobDetails"][params.JOB_NAME]["job_url"],params.JOB_ID)
                    println("Calling  " + jenkinsUrl)
                    def parsedJenkinsBuildDetails = getRequest(jenkinsUrl)
                    if (parsedJenkinsBuildDetails["errorCode"] != null) {
                        throw new Exception("ERROR : Wrong jobname or jobid" )
                    }
                    
                    def buildMetrics = collectMetricsFromJobdetails(params.JOB_NAME,parsedJenkinsBuildDetails,jobConfig["jobDetails"][params.JOB_NAME]) 
                    def buildMetricsInJSON = convertMapToJsonString(buildMetrics)
                    println("Job Metrics :: " )
                    println(buildMetricsInJSON)
                    env.buildMetrics = buildMetricsInJSON
                }
                
            }
        }
        stage('Push Metrics to InfluxDB') {
            steps {
               script {
                   println("Store build to influx db") 
                   try {
                        def jobConfig = fetchStaticJobConfiguration()
                        def buildMetrics = convertJsonStringToJsonObject(env.buildMetrics)
                        def influxMeasurement = convertBuildDetailsToInfluxMeasurements(buildMetrics) 
                        
                        def influxQuery = transformMapToInfluxQuery("build_stats",buildMetrics["timestamp"],influxMeasurement[1],influxMeasurement[0]);
                        writeToInfluxDB(jobConfig["influx"]["url"],jobConfig["influx"]["db"],jobConfig["influx"]["auth"],influxQuery)
                   } catch(Exception e) {
                        println("Error occured while push metrics to influx db :: " + e.getMessage()) 
                        throw e
                   }  
               }
            }
        }
    }
}
